{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-c52347978d183f70c4e404cec858950e09750188",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/core/EntryPoint.sol": "project/contracts/core/EntryPoint.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/core/EntryPoint.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\n\nimport \"./VotingPool.sol\";\nimport \"./VotingPoolDataLib.sol\";\nimport \"../interfaces/PackedVotingPoolData.sol\";\nimport \"../interfaces/IEntryPoint.sol\";\n\ncontract EntryPoint is VotingPool, IEntryPoint {\n    using VotingPoolDataLib for VotingPoolDataArgument;\n\n    function newVotingPool(VotingPoolDataArgument calldata _poolData) external {\n        bytes32 poolHash = _new(_poolData.getHash(version), _poolData);\n\n        emit VotingPoolCreated(version, poolHash);\n    }\n}\n"
      },
      "project/contracts/core/VotingPool.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.28;\r\n\r\nimport \"../interfaces/PackedVotingPoolData.sol\";\r\nimport \"../interfaces/IVotingPool.sol\";\r\n\r\ncontract VotingPool is IVotingPool {\r\n    uint256 public version;\r\n    mapping(bytes32 => PoolData) pools;\r\n\r\n    function _new(\r\n        bytes32 _poolHash,\r\n        VotingPoolDataArgument memory _poolData\r\n    ) internal returns (bytes32) {\r\n        pools[_poolHash] = PoolData({\r\n            version: version,\r\n            voterStorageHashLocation: keccak256(abi.encode(_poolHash)),\r\n            candidates: _poolData.candidates,\r\n            owner: _poolData.owner\r\n        });\r\n        version++;\r\n        return _poolHash;\r\n    }\r\n}\r\n"
      },
      "project/contracts/core/VotingPoolDataLib.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.28;\r\n\r\nimport \"../interfaces/PackedVotingPoolData.sol\";\r\n\r\nlibrary VotingPoolDataLib {\r\n    function encode(\r\n        VotingPoolDataArgument calldata _poolData,\r\n        uint256 version\r\n    ) internal pure returns (bytes memory ret) {\r\n        string memory title = _poolData.title;\r\n        string memory description = _poolData.description;\r\n        uint8[] memory candidates = _poolData.candidates;\r\n        address owner = _poolData.owner;\r\n        return abi.encode(title, description, candidates, owner, version);\r\n    }\r\n\r\n    function getHash(\r\n        VotingPoolDataArgument calldata _poolData,\r\n        uint256 version\r\n    ) internal pure returns (bytes32) {\r\n        return keccak256(encode(_poolData, version));\r\n    }\r\n}\r\n"
      },
      "project/contracts/interfaces/IEntryPoint.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.28;\r\n\r\nimport \"../interfaces/PackedVotingPoolData.sol\";\r\n\r\ninterface IEntryPoint {\r\n    event VotingPoolCreated(uint256 indexed version, bytes32 indexed poolHash);\r\n\r\n    function newVotingPool(VotingPoolDataArgument calldata _poolData) external;\r\n}\r\n"
      },
      "project/contracts/interfaces/IVotingPool.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.28;\r\n\r\nimport \"../interfaces/PackedVotingPoolData.sol\";\r\n\r\ninterface IVotingPool {\r\n    // function _new(\r\n    //     bytes32 _poolHash,\r\n    //     VotingPoolData calldata _poolData\r\n    // ) internal;\r\n}\r\n"
      },
      "project/contracts/interfaces/PackedVotingPoolData.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.28;\r\n\r\nstruct VotingPoolDataArgument {\r\n    string title;\r\n    string description;\r\n    uint8[] candidates;\r\n    address owner;\r\n}\r\n\r\nstruct PoolData {\r\n    uint256 version;\r\n    bytes32 voterStorageHashLocation;\r\n    uint8[] candidates;\r\n    address owner;\r\n}\r\n"
      }
    }
  }
}