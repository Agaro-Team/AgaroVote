name: Backend Docker Build & Deploy

on:
  push:
    branches: ["main"]
    paths:
      - "AGARO-MAIN-BE/**"
  workflow_dispatch:

env:
  DOCKER_IMAGE: ardialqlause/agaro-main-be
  CONTAINER_NAME: agaro-be
  PORT: 3000
  ENV_FILE: .env
  REMOTE_DIR: /home/ardial/agaro-be

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./AGARO-MAIN-BE
          file: ./AGARO-MAIN-BE/Dockerfile.prod
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 92.113.145.8 >> ~/.ssh/known_hosts

      - name: Create env file from secret
        run: |
          echo "${{ secrets.ENV_PROD }}" > ./AGARO-MAIN-BE/${{ env.ENV_FILE }}
          echo "Environment file created"
          cat ./AGARO-MAIN-BE/${{ env.ENV_FILE }}

      - name: Upload env file to server
        run: |
          echo "Creating directory on remote server if not exists..."
          ssh -o StrictHostKeyChecking=no ardial@92.113.145.8 "mkdir -p ${{ env.REMOTE_DIR }}"
          echo "Uploading environment file..."
          scp -o StrictHostKeyChecking=no ./AGARO-MAIN-BE/${{ env.ENV_FILE }} ardial@92.113.145.8:${{ env.REMOTE_DIR }}/${{ env.ENV_FILE }}

      - name: Deploy to Server
        run: |
          ssh ardial@92.113.145.8 "
            sudo bash -c '
              echo \"Pulling latest Docker image\"
              docker pull ${{ env.DOCKER_IMAGE }}:latest

              echo \"Stopping old container\"
              docker stop ${{ env.CONTAINER_NAME }} 2>/dev/null || true
              docker rm ${{ env.CONTAINER_NAME }} 2>/dev/null || true

              echo \"Cleaning unused containers/images\"
              docker container prune -f
              docker image prune -f

              echo \"Running new container\"
              docker run -d \
                --name agaro-be \
                --restart unless-stopped \
                --network agaro-network \
                -p 127.0.0.1:${{ env.PORT }}:${{ env.PORT }} \
                --env-file ${{ env.REMOTE_DIR }}/${{ env.ENV_FILE }} \
                ${{ env.DOCKER_IMAGE }}:latest
            '
          "
