services:
  agaro-postgres:
    image: postgres:17
    container_name: agaro-postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - agaro_postgres_data:/var/lib/postgresql/data
    networks:
      - agaro-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  agaro-adminer:
    image: adminer:latest
    container_name: agaro-adminer
    restart: unless-stopped
    environment:
      ADMINER_DEFAULT_SERVER: agaro-postgres
    ports:
      - "8080:8080"
    depends_on:
      - agaro-postgres
    networks:
      - agaro-network

  agaro-anvil:
    image: ghcr.io/foundry-rs/foundry:latest
    container_name: agaro-anvil
    entrypoint: ["anvil"]
    command: >
      --host 0.0.0.0
      --chain-id 13377
      --block-time 5
      --gas-limit 30000000
      --base-fee 1000000000
    ports:
      - "8545:8545"
    networks:
      - agaro-network

  agaro-redis:
    image: redis:7
    container_name: agaro-redis
    restart: unless-stopped
    env_file:
      - .env
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    ports:
      - "127.0.0.1:8882:8882"
    volumes:
      - agaro_redis_data:/data
    networks:
      - agaro-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  agaro-network:
    name: agaro-network
    external: true

volumes:
  agaro_postgres_data:
    name: agaro_postgres_data
  agaro_redis_data:
    name: agaro_redis_data
